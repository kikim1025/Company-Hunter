{"version":3,"sources":["constants/constants.js","redux/reducer.js","redux/store.js","components/presentational/Button.js","components/presentational/Modal.js","redux/actions.js","components/container/ModalContainer.js","components/presentational/Header.js","components/presentational/Alert.js","components/container/AlertContainer.js","components/presentational/Control.js","components/container/ControlContainer.js","components/presentational/Company.js","components/presentational/Main.js","components/container/MainContainer.js","components/presentational/Page.js","App.js","index.js"],"names":["GET_DATA","FAIL_DUP","FAIL_GONE","FAIL","TOGGLE_MODAL","ALERT_MODAL","initState","modal","reducer","state","arguments","length","undefined","action","type","Object","assign","data","payload","input","name","performance","desc","contacts","alert","status","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","Button","props","react_default","a","createElement","className","style","onClick","Modal","email1","email2","email3","getInput","event","_this","setState","defineProperty","target","value","resetState","closeModal","toggleModal","getUpdateScreen","sendData","_this2","this","maxLength","placeholder","defaultValue","onChange","min","max","presentational_Button","map","c","i","key","deleteCompany","React","Component","connect","dispatch","performanceInt","parseInt","arr","newArr","push","removeEmpty","checked","test","includes","areUniqueEmails","checkDuplicate","$","put","then","res","console","log","catch","error","post","delete","Header","id","Alert","Control","Company","company","Main","componentDidMount","getData","ControlContainer","AlertContainer","presentational_Company","get","Page","ModalContainer","presentational_Header","MainContainer","App","presentational_Page","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.8cf3826c.chunk.js","sourcesContent":["// Redux action constants\r\nexport const GET_DATA = 'GET_DATA';\r\nexport const FAIL_DUP = 'FAIL_DUP'; // 409\r\nexport const FAIL_GONE = 'FAIL_GONE'; // 404\r\nexport const FAIL = 'FAIL'; // 500\r\nexport const TOGGLE_MODAL = 'TOGGLE_MODAL';\r\nexport const ALERT_MODAL = 'ALERT_MODAL';","import { GET_DATA, FAIL_DUP, FAIL_GONE, FAIL, TOGGLE_MODAL, ALERT_MODAL } from '../constants/constants';\r\n\r\nconst initState = {\r\n    modal: false\r\n};\r\n\r\nfunction reducer(state = initState, action) {\r\n    switch (action.type) {\r\n        case GET_DATA:\r\n            return Object.assign({}, state, {\r\n                data: action.payload,\r\n                modal: false,\r\n                input: true,\r\n                name: '',\r\n                performance: 0,\r\n                desc: '',\r\n                contacts: [],\r\n                alert: ''\r\n            });\r\n        case FAIL_DUP:\r\n            return Object.assign({}, state, { \r\n                data: action.payload,\r\n                modal: false,\r\n                alert: 'Company data with same name was already created by another user. Data refreshed.'\r\n            });\r\n        case FAIL_GONE:\r\n            return Object.assign({}, state, { \r\n                data: action.payload,\r\n                modal: false,\r\n                alert: 'The company data was deleted by another user. Data refreshed.'\r\n            });\r\n        case FAIL:\r\n            return Object.assign({}, state, { \r\n                modal: false,\r\n                alert: 'Unkown Server ERROR'\r\n            });\r\n        case TOGGLE_MODAL:\r\n            return Object.assign({}, state, { \r\n                modal: action.modal,\r\n                input: action.input,\r\n                name: action.name,\r\n                status: action.status,\r\n                performance: action.performance,\r\n                desc: action.desc,\r\n                contacts: action.contacts,\r\n                alert: ''\r\n            });\r\n        case ALERT_MODAL:\r\n            return Object.assign({}, state, { \r\n                modal: false,\r\n                alert: action.alert\r\n            });\r\n        default: \r\n            return state;\r\n    };\r\n};\r\n\r\nexport default reducer;","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducer from './reducer';\r\n\r\n// Redux devtools\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\n// create redux store and apply middleware\r\nconst store = createStore(\r\n    reducer, \r\n    composeEnhancers(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;","import React from 'react';\r\n\r\nconst Button = (props) => (\r\n    <button type='button' className={'btn ' + props.style} onClick={props.onClick}>\r\n        {props.name}\r\n    </button>\r\n);\r\n\r\nexport default Button;","import React from 'react';\r\nimport Button from './Button';\r\n\r\nclass Modal extends React.Component {\r\n\r\n    // Local state keeps track of values of each input elements \r\n    state = {\r\n        name: '',\r\n        status: 'Researching',\r\n        performance: 0,\r\n        desc: '',\r\n        email1: '',\r\n        email2: '',\r\n        email3: ''\r\n    };\r\n\r\n    getInput = (event) => {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n\r\n    resetState = () => {\r\n        this.setState({ name: '', status: 'Researching', performance: 0, desc: '', email1: '', email2: '', email3: '' });\r\n    };\r\n\r\n    // Reset local state and activate toggleModal action on Redux\r\n    closeModal = () => {\r\n        this.resetState();\r\n        this.props.toggleModal(false, true, '', '', 0, '', [])\r\n    };\r\n\r\n    // Upon clicking update button, set local state with current company data and activate toggleModal action on redux\r\n    getUpdateScreen = () => {\r\n        this.setState({ name: this.props.name, status: this.props.status, performance: this.props.performance, \r\n            desc: this.props.desc, email1: this.props.contacts[0] || '', email2: this.props.contacts[1] || '', email3: this.props.contacts[2] || '' });\r\n        this.props.toggleModal(true, true, this.props.name, this.props.status, this.props.performance, this.props.desc, this.props.contacts);\r\n    };\r\n\r\n    sendData = () => {\r\n        this.props.sendData(this.state.name, this.state.status, this.state.performance, this.state.desc, this.state.email1, this.state.email2, this.state.email3, this.props.data);\r\n        this.resetState();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    !this.props.modal\r\n                    ?   ''\r\n                    :   <article className='modal-box'>\r\n                            <section className='modal-out' onClick={this.closeModal}>\r\n                                <div className='modal-out__top'></div>\r\n                                <div className='modal-out__right'></div>\r\n                                <div className='modal-out__bottom'></div>\r\n                                <div className='modal-out__left'></div>\r\n                            </section>\r\n                            {\r\n                                this.props.input\r\n                                ?   <section className='modal grid grid--modal'>\r\n                                        <div className='modal__name item-row'>\r\n                                            <div className='input-group'>\r\n                                                <div className='input-group-prepend'>\r\n                                                    <span className='input-group-text'>Name</span>\r\n                                                </div>\r\n                                                <input type='text' name='name' maxLength='30' placeholder='Company Name' defaultValue={this.props.name} onChange={this.getInput}/>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className='modal__status item-row'>\r\n                                            <div className='input-group'>\r\n                                                <div className='input-group-prepend'>\r\n                                                    <label className='input-group-text'>Status</label>\r\n                                                </div>\r\n                                                <select className='custom-select' name='status' defaultValue={this.props.status} onChange={this.getInput}>\r\n                                                    <option value='Researching'>Researching</option>\r\n                                                    <option value='Pending'>Pending</option>\r\n                                                    <option value='Approved'>Approved</option>\r\n                                                    <option value='Declined'>Declined</option>\r\n                                                </select>\r\n                                            </div>    \r\n                                        </div>\r\n                                        <div className='modal__performance item-row'>\r\n                                            <div className='input-group'>\r\n                                                <div className='input-group-prepend'>\r\n                                                    <span className='input-group-text'>Performance</span>\r\n                                                </div>\r\n                                                <input type='number' name='performance' min='0' max='10' placeholder='Score' defaultValue={this.props.performance} onChange={this.getInput} />\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className='modal__desc item-row'>                                            \r\n                                            <textarea className='modal--input__desc form-control' name='desc' maxLength='200' placeholder='Company Description' defaultValue={this.props.desc} onChange={this.getInput} />\r\n                                        </div>\r\n                                        <div className='modal__contacts item-row'>\r\n                                            <span className='input-group-text'>Contacts Emails</span>    \r\n                                            <input type='text' name='email1' maxLength='30' placeholder='Email 1' defaultValue={this.props.contacts[0]} onChange={this.getInput} />\r\n                                            <input type='text' name='email2' maxLength='30' placeholder='Email 2' defaultValue={this.props.contacts[1]} onChange={this.getInput} />\r\n                                            <input type='text' name='email3' maxLength='30' placeholder='Email 3' defaultValue={this.props.contacts[2]} onChange={this.getInput} />\r\n                                        </div>\r\n                                        <div className='modal__buttons item-row'>\r\n                                            <Button name='Send Data' style='btn-success' onClick={this.sendData} />\r\n                                        </div>\r\n                                    </section>\r\n                                :   <section className='modal grid grid--modal'>\r\n                                        <h2 className='modal__name item-row'>{this.props.name}</h2>\r\n                                        <div className='modal__status item-row'>{this.props.status}</div>\r\n                                        <div className='modal__performance item-row'>{this.props.performance}/10</div>\r\n                                        <p className='modal__desc item-row'>{this.props.desc}</p>\r\n                                        <div className='modal__contacts item-row'>\r\n                                            <div>Contacts</div>\r\n                                            {\r\n                                                this.props.contacts.map((c, i) => (\r\n                                                    <div className='email' key={i}>{c}</div>\r\n                                                ))\r\n                                            }\r\n                                        </div>\r\n                                        <div className='modal__alert item-row'>Name, Status, Performance, Description are required, performance should be between 0 and 10 inclusively, and emails, if present, should be unique and in correct format.</div>\r\n                                        <div className='modal__buttons item-row'>\r\n                                            <div className='left'><Button name='Delete' style='btn-danger' onClick={() => this.props.deleteCompany(this.props.name)}/></div>\r\n                                            <div className='right'><Button name='Edit' style='btn-primary'onClick={this.getUpdateScreen}/></div>\r\n                                        </div>\r\n                                    </section>\r\n                            }\r\n                        </article>\r\n                }\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nexport default Modal;","import $ from 'axios';\r\nimport { GET_DATA, FAIL_DUP, FAIL_GONE, FAIL, TOGGLE_MODAL, ALERT_MODAL } from '../constants/constants';\r\n\r\n// Helper function to remove all empty String elements from an array\r\nconst removeEmpty = (arr) => {\r\n    let newArr = [];\r\n    for (let i = 0; i < arr.length; i++) {\r\n        if (arr[i].length > 0) {\r\n            newArr.push(arr[i]);\r\n        };\r\n    };\r\n    return newArr;\r\n};\r\n\r\n// Helper function to check if all elements of array are unique emails\r\n// Empty array is true\r\nconst areUniqueEmails = (arr) => {\r\n    let checked = [];\r\n    for (let i = 0; i < arr.length; i++) {\r\n        if (!/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,4})+$/.test(arr[i]) || checked.includes(arr[i])) {\r\n            return false;\r\n        };\r\n        checked.push(arr[i])\r\n    };\r\n    return true;\r\n};\r\n\r\n// Helper function to check if the data to be sent is new or updating previous\r\nconst checkDuplicate = (name, arr) => {\r\n    for (let i = 0; i< arr.length; i++) {\r\n        if (arr[i].name === name) {\r\n            return true;\r\n        };\r\n    };\r\n    return false;\r\n};\r\n\r\n\r\n/** ----------Actions---------- **/\r\n\r\n// Retrieve data from server to redux store\r\nexport const getData = () => {\r\n    return (dispatch) => {\r\n        return (\r\n            $.get('/api/company')\r\n            .then((res) => {\r\n                dispatch({ type: GET_DATA, payload: res.data.data });\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n                dispatch({ type: FAIL });\r\n            })\r\n        );    \r\n    };\r\n};\r\n\r\n// Send request to create or update company data\r\n// Check if data to be sent is valid (some other conditions were already checked through UI settings of input elements)\r\nexport const sendData = (name, status, performance, desc, email1, email2, email3, data) => {\r\n    const performanceInt = parseInt(performance);\r\n    const temp = [email1, email2, email3];\r\n    const contacts = removeEmpty(temp);\r\n    if (name.length > 0 && performanceInt >= 0 && performanceInt <= 10 && areUniqueEmails(contacts)) {\r\n        return (dispatch) => {\r\n            if (!checkDuplicate(name, data)) {\r\n                return (\r\n                    $.post('/api/company', { name, status, performance: performanceInt, desc, contacts  })\r\n                    .then((res) => {\r\n                        if (res.data.status === 200) {\r\n                            dispatch({ type: GET_DATA, payload: res.data.data });\r\n                        } else if (res.data.status === 409) {\r\n                            dispatch({ type: FAIL_DUP, payload: res.data.data });\r\n                        } else {\r\n                            console.log(res);\r\n                            dispatch({ type: FAIL });\r\n                        };\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.log(error); \r\n                        dispatch({ type: FAIL });\r\n                    })\r\n                );\r\n            } else {\r\n                return (\r\n                    $.put('/api/company', { name, status, performance: performanceInt, desc, contacts  })\r\n                    .then((res) => {\r\n                        if (res.data.status === 200) {\r\n                            dispatch({ type: GET_DATA, payload: res.data.data });\r\n                        } else if (res.data.status === 404) {\r\n                            dispatch({ type: FAIL_GONE, payload: res.data.data });\r\n                        } else {\r\n                            console.log(res);\r\n                            dispatch({ type: FAIL });\r\n                        };\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.log(error); \r\n                        dispatch({ type: FAIL });\r\n                    })\r\n                );\r\n            };    \r\n        };\r\n    } else {\r\n        return {\r\n            type: ALERT_MODAL,\r\n            alert: 'Name, Status, Performance, Description are required, performance should be between 0 and 10 inclusively, and emails should be unique and in correct format.'\r\n        };\r\n    };\r\n};\r\n\r\n// send request to delete company data\r\nexport const deleteCompany = (name) => {\r\n    return (dispatch) => {\r\n        return (\r\n            $.delete('/api/company', { data: { name } })\r\n            .then((res) => {\r\n                if (res.data.status === 200) {\r\n                    dispatch({ type: GET_DATA, payload: res.data.data });\r\n                } else {\r\n                    dispatch({ type: FAIL });\r\n                };\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n                dispatch({ type: FAIL });\r\n            })\r\n        );    \r\n    };\r\n};\r\n\r\n// Toggle modal and sends to redux store appropriate data\r\nexport const toggleModal = (modal, input, name, status, performance, desc, contacts) => {\r\n    return {\r\n        type: TOGGLE_MODAL,\r\n        modal,\r\n        input,\r\n        name,\r\n        status,\r\n        performance,\r\n        desc,\r\n        contacts\r\n    };\r\n};","import { connect } from 'react-redux';\r\nimport Modal from '../presentational/Modal';\r\nimport { toggleModal, sendData, deleteCompany } from '../../redux/actions';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        data: state.data,\r\n        modal: state.modal,\r\n        input: state.input,\r\n        name: state.name,\r\n        status: state.status,\r\n        performance: state.performance,\r\n        desc: state.desc,\r\n        contacts: state.contacts\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        toggleModal: (modal, input, name, status, performance, desc, contacts) => dispatch(toggleModal(modal, input, name, status, performance, desc, contacts)),\r\n        sendData: (name, status, performance, desc, email1, email2, email3, data) => dispatch(sendData(name, status, performance, desc, email1, email2, email3, data)),\r\n        deleteCompany: (name) => dispatch(deleteCompany(name))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (Modal);","import React from 'react';\r\n\r\nconst Header = () => (\r\n    <header id='header'>\r\n        <h1>Company Hunter</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Alert = (props) => (\r\n    <div id='alert'>\r\n        {props.alert}\r\n    </div>\r\n);\r\n\r\nexport default Alert;","import { connect } from 'react-redux';\r\nimport Alert from '../presentational/Alert';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        alert: state.alert\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, null) (Alert);","import React from 'react';\r\nimport Button from './Button';\r\n\r\n// might add search and sorting buttons later\r\nclass Control extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <aside className='control-panel'>\r\n                <div className='item-row'>\r\n                <Button name='Create Company Data' style='btn-primary'\r\n                    onClick={() => \r\n                        this.props.toggleModal(\r\n                            true, true, '', '', 0, '', []\r\n                        )\r\n                    }\r\n                />\r\n                </div>\r\n            </aside>\r\n        );\r\n    };\r\n};\r\n\r\nexport default Control;","import { connect } from 'react-redux';\r\nimport Control from '../presentational/Control';\r\nimport { toggleModal } from '../../redux/actions';\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        toggleModal: (modal, input, name, status, performance, desc, contacts) => dispatch(toggleModal(modal, input, name, status, performance, desc, contacts)),\r\n    };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps) (Control);","import React from 'react';\r\nimport Button from './Button';\r\n\r\nconst Company = (props) => (\r\n    <article className='company'>\r\n        <div className='company__name item-row'>{props.company.name}</div>\r\n        <div className='company__performance item-row'>Score: {props.company.performance}/10</div>\r\n        <div className='company__status item-row'>Status: {props.company.status}</div>\r\n        <div className='company__buttons item-row'>\r\n            <Button name='Details' style='btn-sm btn-info'\r\n                onClick={() => \r\n                    props.toggleModal(\r\n                        true, false, props.company.name, \r\n                        props.company.status, props.company.performance, \r\n                        props.company.desc, props.company.contacts\r\n                    )\r\n                }\r\n            />\r\n        </div>\r\n    </article>\r\n);\r\n\r\nexport default Company;","import React from 'react';\r\nimport AlertContainer from '../container/AlertContainer';\r\nimport ControlContainer from '../container/ControlContainer';\r\nimport Company from './Company';\r\n\r\nclass Main extends React.Component {\r\n\r\n    // direct redux to dispatch action for retrieving server data\r\n    componentDidMount = () => {\r\n        console.log(this.props);\r\n        this.props.getData(); \r\n    };\r\n\r\n    render() {\r\n        return ( \r\n            <main>\r\n                {   \r\n                    !this.props.data\r\n                    ?   <div>retrieving data...</div>\r\n                    :   <div className='grid grid--main'>\r\n                            <ControlContainer />\r\n                            <div>\r\n                                <AlertContainer />\r\n                                <section className='company-box grid grid--company'>\r\n                                    {\r\n                                        this.props.data.map((c, i) => (\r\n                                            <Company company={c} key={i} toggleModal={this.props.toggleModal} />\r\n                                        ))\r\n                                    }\r\n                                </section>\r\n                            </div>\r\n                        </div>\r\n                }\r\n            </main>\r\n        );\r\n    };\r\n};\r\n\r\nexport default Main;","import { connect } from 'react-redux';\r\nimport Main from '../presentational/Main';\r\nimport { getData, toggleModal } from '../../redux/actions';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        data: state.data\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getData: () => dispatch(getData()),\r\n        toggleModal: (modal, name, status, performance, desc, contacts, input) => dispatch(toggleModal(modal, name, status, performance, desc, contacts, input))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (Main);","import React from 'react';\r\nimport ModalContainer from '../container/ModalContainer';\r\nimport Header from './Header';\r\nimport MainContainer from '../container/MainContainer';\r\n\r\nconst Page = () => (\r\n    <div id='page'>\r\n        <ModalContainer />\r\n        <Header />\r\n        <MainContainer />\r\n    </div>\r\n);\r\n\r\nexport default Page;","import React from 'react';\nimport Page from './components/presentational/Page';\n\nconst App = () => (\n    <div id='App'>\n        <Page />\n    </div>\n);\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport App from './App';\nimport './style/style.css';\n\nReactDOM.render(\n    <Provider store={store}><App /></Provider>, document.getElementById('root')\n);"],"sourceRoot":""}